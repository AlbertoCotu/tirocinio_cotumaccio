# Generated by Django 3.2.5 on 2021-09-01 16:57

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Allergene',
            fields=[
                ('nome', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('nome', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Chef',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manager', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Contenuto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantita', models.FloatField(validators=[django.core.validators.MinValueValidator(1.0)])),
            ],
        ),
        migrations.CreateModel(
            name='Ingrediente',
            fields=[
                ('nome_specifico', models.CharField(max_length=100)),
                ('nome_generico', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('listino', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('energiaKcal', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('energiaKj', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('acqua', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('protAnim', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('protVeg', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('protTot', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('amido', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('glucidiSolub', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('glucidiTot', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('lipidiTot', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('saturi', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('monoins', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('polins', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('acidoOleico', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('acidoLinoleico', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('acidoLinolenico', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('altriPolins', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('colesterolo', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('fibreAnim', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('alcool', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('ferro', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('ca', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('na', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('k', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('p', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('zn', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('vitB1', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('vitB2', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('vitB3', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('vitC', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('vitB6', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('folico', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('retinolo', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('betaCarotene', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('vitE', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('vitD', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('parteEdibile', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('allergeni', models.ManyToManyField(blank=True, to='app.Allergene')),
            ],
        ),
        migrations.CreateModel(
            name='Portata',
            fields=[
                ('nome', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('nome', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Ricetta',
            fields=[
                ('nome', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('approvata', models.BooleanField(default=False)),
                ('foto', models.ImageField(blank=True, null=True, upload_to='ricette/')),
                ('chef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.chef')),
                ('ingredienti', models.ManyToManyField(through='app.Contenuto', to='app.Ingrediente')),
                ('portata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.portata')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.tag')),
            ],
        ),
        migrations.CreateModel(
            name='Impianto',
            fields=[
                ('nome', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.area')),
            ],
        ),
        migrations.AddField(
            model_name='contenuto',
            name='ingrediente',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.ingrediente'),
        ),
        migrations.AddField(
            model_name='contenuto',
            name='ricetta',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.ricetta'),
        ),
        migrations.AddField(
            model_name='chef',
            name='impianto',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.impianto'),
        ),
        migrations.AddField(
            model_name='chef',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_id', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='contenuto',
            unique_together={('ingrediente', 'ricetta')},
        ),
    ]
